// Generated by gencpp from file ethereum_common/UInt256.msg
// DO NOT EDIT!


#ifndef ETHEREUM_COMMON_MESSAGE_UINT256_H
#define ETHEREUM_COMMON_MESSAGE_UINT256_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethereum_common
{
template <class ContainerAllocator>
struct UInt256_
{
  typedef UInt256_<ContainerAllocator> Type;

  UInt256_()
    : uint256()  {
    }
  UInt256_(const ContainerAllocator& _alloc)
    : uint256(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uint256_type;
  _uint256_type uint256;





  typedef boost::shared_ptr< ::ethereum_common::UInt256_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethereum_common::UInt256_<ContainerAllocator> const> ConstPtr;

}; // struct UInt256_

typedef ::ethereum_common::UInt256_<std::allocator<void> > UInt256;

typedef boost::shared_ptr< ::ethereum_common::UInt256 > UInt256Ptr;
typedef boost::shared_ptr< ::ethereum_common::UInt256 const> UInt256ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethereum_common::UInt256_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethereum_common::UInt256_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethereum_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ethereum_common': ['/home/parallels/energyhack_2018/ws/src/robonomics_comm/ethereum_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethereum_common::UInt256_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethereum_common::UInt256_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethereum_common::UInt256_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethereum_common::UInt256_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethereum_common::UInt256_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethereum_common::UInt256_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethereum_common::UInt256_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3e47bf4311da2c63d362b5eea4c389b";
  }

  static const char* value(const ::ethereum_common::UInt256_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3e47bf4311da2c6ULL;
  static const uint64_t static_value2 = 0x3d362b5eea4c389bULL;
};

template<class ContainerAllocator>
struct DataType< ::ethereum_common::UInt256_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethereum_common/UInt256";
  }

  static const char* value(const ::ethereum_common::UInt256_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethereum_common::UInt256_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 256bit unisgned integer\n\
string uint256\n\
";
  }

  static const char* value(const ::ethereum_common::UInt256_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethereum_common::UInt256_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uint256);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UInt256_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethereum_common::UInt256_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethereum_common::UInt256_<ContainerAllocator>& v)
  {
    s << indent << "uint256: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uint256);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHEREUM_COMMON_MESSAGE_UINT256_H
