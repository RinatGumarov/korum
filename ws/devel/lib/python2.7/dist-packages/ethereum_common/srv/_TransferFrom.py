# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ethereum_common/TransferFromRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ethereum_common.msg

class TransferFromRequest(genpy.Message):
  _md5sum = "86e9ea46941820c424da18e712b60b3e"
  _type = "ethereum_common/TransferFromRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Address owner
Address to
UInt256 value

================================================================================
MSG: ethereum_common/Address
# Ethereum address message
string address

================================================================================
MSG: ethereum_common/UInt256
# 256bit unisgned integer
string uint256
"""
  __slots__ = ['owner','to','value']
  _slot_types = ['ethereum_common/Address','ethereum_common/Address','ethereum_common/UInt256']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       owner,to,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransferFromRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.owner is None:
        self.owner = ethereum_common.msg.Address()
      if self.to is None:
        self.to = ethereum_common.msg.Address()
      if self.value is None:
        self.value = ethereum_common.msg.UInt256()
    else:
      self.owner = ethereum_common.msg.Address()
      self.to = ethereum_common.msg.Address()
      self.value = ethereum_common.msg.UInt256()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.owner.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.to.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.value.uint256
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.owner is None:
        self.owner = ethereum_common.msg.Address()
      if self.to is None:
        self.to = ethereum_common.msg.Address()
      if self.value is None:
        self.value = ethereum_common.msg.UInt256()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.owner.address = str[start:end].decode('utf-8')
      else:
        self.owner.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to.address = str[start:end].decode('utf-8')
      else:
        self.to.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.value.uint256 = str[start:end].decode('utf-8')
      else:
        self.value.uint256 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.owner.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.to.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.value.uint256
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.owner is None:
        self.owner = ethereum_common.msg.Address()
      if self.to is None:
        self.to = ethereum_common.msg.Address()
      if self.value is None:
        self.value = ethereum_common.msg.UInt256()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.owner.address = str[start:end].decode('utf-8')
      else:
        self.owner.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to.address = str[start:end].decode('utf-8')
      else:
        self.to.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.value.uint256 = str[start:end].decode('utf-8')
      else:
        self.value.uint256 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ethereum_common/TransferFromResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TransferFromResponse(genpy.Message):
  _md5sum = "f773e2ccdc8084a06c1a9a6f6f58e5d3"
  _type = "ethereum_common/TransferFromResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8[32] txhash

"""
  __slots__ = ['txhash']
  _slot_types = ['uint8[32]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       txhash

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransferFromResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.txhash is None:
        self.txhash = b'\0'*32
    else:
      self.txhash = b'\0'*32

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.txhash
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_32B().pack(*_x))
      else:
        buff.write(_get_struct_32s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 32
      self.txhash = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.txhash
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_32B().pack(*_x))
      else:
        buff.write(_get_struct_32s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 32
      self.txhash = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_32B = None
def _get_struct_32B():
    global _struct_32B
    if _struct_32B is None:
        _struct_32B = struct.Struct("<32B")
    return _struct_32B
_struct_32s = None
def _get_struct_32s():
    global _struct_32s
    if _struct_32s is None:
        _struct_32s = struct.Struct("<32s")
    return _struct_32s
class TransferFrom(object):
  _type          = 'ethereum_common/TransferFrom'
  _md5sum = 'bdaad270cecdaddc8d27fbf972359604'
  _request_class  = TransferFromRequest
  _response_class = TransferFromResponse
