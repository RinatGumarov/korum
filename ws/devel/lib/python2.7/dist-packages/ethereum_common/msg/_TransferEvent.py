# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ethereum_common/TransferEvent.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ethereum_common.msg

class TransferEvent(genpy.Message):
  _md5sum = "35f272b72902fee74cbfac3183ab4ae1"
  _type = "ethereum_common/TransferEvent"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Address args_from 
Address args_to
UInt256 args_value 

================================================================================
MSG: ethereum_common/Address
# Ethereum address message
string address

================================================================================
MSG: ethereum_common/UInt256
# 256bit unisgned integer
string uint256
"""
  __slots__ = ['args_from','args_to','args_value']
  _slot_types = ['ethereum_common/Address','ethereum_common/Address','ethereum_common/UInt256']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       args_from,args_to,args_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransferEvent, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.args_from is None:
        self.args_from = ethereum_common.msg.Address()
      if self.args_to is None:
        self.args_to = ethereum_common.msg.Address()
      if self.args_value is None:
        self.args_value = ethereum_common.msg.UInt256()
    else:
      self.args_from = ethereum_common.msg.Address()
      self.args_to = ethereum_common.msg.Address()
      self.args_value = ethereum_common.msg.UInt256()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.args_from.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.args_to.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.args_value.uint256
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.args_from is None:
        self.args_from = ethereum_common.msg.Address()
      if self.args_to is None:
        self.args_to = ethereum_common.msg.Address()
      if self.args_value is None:
        self.args_value = ethereum_common.msg.UInt256()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.args_from.address = str[start:end].decode('utf-8')
      else:
        self.args_from.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.args_to.address = str[start:end].decode('utf-8')
      else:
        self.args_to.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.args_value.uint256 = str[start:end].decode('utf-8')
      else:
        self.args_value.uint256 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.args_from.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.args_to.address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.args_value.uint256
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.args_from is None:
        self.args_from = ethereum_common.msg.Address()
      if self.args_to is None:
        self.args_to = ethereum_common.msg.Address()
      if self.args_value is None:
        self.args_value = ethereum_common.msg.UInt256()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.args_from.address = str[start:end].decode('utf-8')
      else:
        self.args_from.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.args_to.address = str[start:end].decode('utf-8')
      else:
        self.args_to.address = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.args_value.uint256 = str[start:end].decode('utf-8')
      else:
        self.args_value.uint256 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
