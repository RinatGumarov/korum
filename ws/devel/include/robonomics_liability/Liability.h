// Generated by gencpp from file robonomics_liability/Liability.msg
// DO NOT EDIT!


#ifndef ROBONOMICS_LIABILITY_MESSAGE_LIABILITY_H
#define ROBONOMICS_LIABILITY_MESSAGE_LIABILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robonomics_liability
{
template <class ContainerAllocator>
struct Liability_
{
  typedef Liability_<ContainerAllocator> Type;

  Liability_()
    : address()
    , model()
    , objective()
    , result()
    , promisee()
    , promisor()
    , token()
    , cost(0)
    , validator()
    , validatorFee(0)  {
    }
  Liability_(const ContainerAllocator& _alloc)
    : address(_alloc)
    , model(_alloc)
    , objective(_alloc)
    , result(_alloc)
    , promisee(_alloc)
    , promisor(_alloc)
    , token(_alloc)
    , cost(0)
    , validator(_alloc)
    , validatorFee(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _address_type;
  _address_type address;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_type;
  _model_type model;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _objective_type;
  _objective_type objective;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _promisee_type;
  _promisee_type promisee;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _promisor_type;
  _promisor_type promisor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _token_type;
  _token_type token;

   typedef uint64_t _cost_type;
  _cost_type cost;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _validator_type;
  _validator_type validator;

   typedef uint64_t _validatorFee_type;
  _validatorFee_type validatorFee;





  typedef boost::shared_ptr< ::robonomics_liability::Liability_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robonomics_liability::Liability_<ContainerAllocator> const> ConstPtr;

}; // struct Liability_

typedef ::robonomics_liability::Liability_<std::allocator<void> > Liability;

typedef boost::shared_ptr< ::robonomics_liability::Liability > LiabilityPtr;
typedef boost::shared_ptr< ::robonomics_liability::Liability const> LiabilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robonomics_liability::Liability_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robonomics_liability::Liability_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robonomics_liability

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robonomics_liability': ['/home/parallels/energyhack_2018/ws/src/robonomics_comm/robonomics_liability/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robonomics_liability::Liability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robonomics_liability::Liability_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robonomics_liability::Liability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robonomics_liability::Liability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robonomics_liability::Liability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robonomics_liability::Liability_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robonomics_liability::Liability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfbed1b3b614dbb05af016d2c1c4cde6";
  }

  static const char* value(const ::robonomics_liability::Liability_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfbed1b3b614dbb0ULL;
  static const uint64_t static_value2 = 0x5af016d2c1c4cde6ULL;
};

template<class ContainerAllocator>
struct DataType< ::robonomics_liability::Liability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robonomics_liability/Liability";
  }

  static const char* value(const ::robonomics_liability::Liability_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robonomics_liability::Liability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string address\n\
string model\n\
string objective\n\
string result\n\
string promisee\n\
string promisor\n\
string token\n\
uint64 cost\n\
string validator\n\
uint64 validatorFee\n\
";
  }

  static const char* value(const ::robonomics_liability::Liability_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robonomics_liability::Liability_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.address);
      stream.next(m.model);
      stream.next(m.objective);
      stream.next(m.result);
      stream.next(m.promisee);
      stream.next(m.promisor);
      stream.next(m.token);
      stream.next(m.cost);
      stream.next(m.validator);
      stream.next(m.validatorFee);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Liability_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robonomics_liability::Liability_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robonomics_liability::Liability_<ContainerAllocator>& v)
  {
    s << indent << "address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.address);
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model);
    s << indent << "objective: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.objective);
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "promisee: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.promisee);
    s << indent << "promisor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.promisor);
    s << indent << "token: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.token);
    s << indent << "cost: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.cost);
    s << indent << "validator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.validator);
    s << indent << "validatorFee: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.validatorFee);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBONOMICS_LIABILITY_MESSAGE_LIABILITY_H
